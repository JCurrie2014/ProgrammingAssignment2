> c = rbind(c(1, -1/4), c(-1/4, 1))
> c = rbind(c(1, -1/4), c(-1/4, 1))
c = rbind(c(1, -1/4), c(-1/4, 1))
class(c)
ci<-solve(c)%*%c
View(ci)
View(ci)
View(c)
View(c)
View(ci)
View(ci)
cii<-solve(ci)%*%ci
c = rbind(c(1, -1/4), c(-1/4, 1))
ci<-solve(c)
cii<-solve(ci)
View(cii)
rm(cii)
View(ci)
View(ci)
rm(ci)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setinverse(m)
m
}
ci<-makeCacheMatrix(c)
ci
rm(ci)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
ci<-makeCacheMatrix(c)
ci
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
rm(ci)
ci<-makeCacheMatrix(c)
ci
class(ci)
rm(ci)
ci<-makeCacheMatrix(c)
class(ci)
rm(ci)
ci<-makeCacheMatrix(c)
ci
rm(ci)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
as.matrix(m)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
as.matrix(m)
}
ci<-makeCacheMatrix(c)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
as.matrix(m)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
ci<-makeCacheMatrix(c)
x
ci<-cacheSolve(c)
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
#m <- x$getinverse()
m<-solve(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
ci<-cacheSolve(c)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
m
}
ci<-makeCacheMatrix(c)
ci<-cacheSolve(c)
ci<-cacheSolve(c)
ci
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
x
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
ci<-makeCacheMatrix(c)
ci<-makeCacheMatrix(c)
ci<-cacheSolve(c)
rm(ci)
ci<-makeCacheMatrix(c)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
}
rm(ci)
ci<-makeCacheMatrix(c)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() inverse
}
rm(ci)
ci<-makeCacheMatrix(c)
ci
rm(ci)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m<<-inverse
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
ci<-makeCacheMatrix(c)
rm(ci)
ci<-cacheSolve(c)
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
ci<-cacheSolve(c)
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
#m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
ci<-cacheSolve(c)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data)
x$setinverse(m)
m
}
ci<-cacheSolve(c)
ci<-cacheSolve(c)
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
#x$setinverse(m)
m
}
ci<-cacheSolve(c)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mi<-makeCacheMatrix(c)
mi<-cachemean(m)
mii<-cachemean(mi)
rm(mi)
mii<-cachemean(c)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mii<-cachemean(c)
mi<-makeVector(c)
mii<-cachemean(mi)
mii<-cachemean(mi)
mii
mi
mean(c)
rm(mi)
rm(mii)
mii<-cachemean(mi)
mi<-makeVector(c)
mii<-cachemean(mi)
mii<-cachemean(mi)
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
ci<-makeCacheMatrix(c)
ci<-cacheSolve(ci)
cii<-cacheSolve(ci)
rm(ci)
ci<-makeCacheMatrix(c)
cii<-cacheSolve(ci)
cii<-cacheSolve(ci)
cii
rm(mi)
rm(mii)
rm(ci)
rm(cii)
ci<-makeCacheMatrix(c)
cii<-cacheSolve(ci)
ci<-makeCacheMatrix(c)
cii<-cacheSolve(ci)
cii<-cacheSolve(ci)
rm(ci)
rm(cii)
ci<-makeCacheMatrix(c)
cacheSolve(ci)
rm(ci)
ci<-makeCacheMatrix(c)
cacheSolve(ci)
rm(ci)
ci<-makeCacheMatrix(c)
c
message("Inverse of c")
cacheSolve(ci)
cacheSolve(ci)
c = rbind(c(1, -1/4), c(-1/4, 1))
ci<-makeCacheMatrix(c)
c
message("Inverse of c")
cacheSolve(ci)
cacheSolve(ci)
rm(ci)
#Testing application
mo = rbind(c(1, -1/4), c(-1/4, 1))
mi<-makeCacheMatrix(mo)
mo
message("Inverse of mo")
cacheSolve(mi)
rm(mo)
rm(mi)
mo = rbind(c(1, -1/4), c(-1/4, 1))
makeCacheMatrix(mo)
mo
message("Inverse of mo")
cacheSolve(mo)
mo = rbind(c(1, -1/4), c(-1/4, 1))
mi<-makeCacheMatrix(mo)
mo
message("Inverse of mo")
cacheSolve(mi)
mo = rbind(c(1, -1/4), c(-1/4, 1))
mi<-makeCacheMatrix(mo)
mo
message("Inverse of matrix named mo")
cacheSolve(mi)
mo = rbind(c(1, -1/4), c(-1/4, 1))
mi<-makeCacheMatrix(mo)
mo
message("Retrieve inverse matrix of mo (mi)")
cacheSolve(mi)
cacheSolve(mi)
mi
